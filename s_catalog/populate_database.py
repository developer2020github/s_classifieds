"""
This module populates database by data generated by generate_data module:
- users
- and ads
If for some reason not done yet, module creates the database and populates
 tables that are needed for applciation to be used (categories, sub-categories and locations)
 After that users table and ads table are populated.
 All users are assigned same password - USERS_PASSWORD, so
 if password - based login is enabled - it is possible to lg in with any of generated user e-mails
  and this password to test user-specific functionality with some data (ads) being already pre-populated.
"""
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


import create_database
import generate_data
import flask_bcrypt
import s_catalog_options

USERS_PASSWORD = "s_classifieds"
bcrypt = flask_bcrypt.Bcrypt()

engine = create_engine(s_catalog_options.DATABASE_URL)

create_database.Base.metadata.bind = engine

DBSession = sessionmaker(bind=engine)

session = DBSession()


def get_id(list_of_objects_with_names, name):
    """
    helper function to get id f object has name field
    :param list_of_objects_with_names: list of objects
    :param name: name to search for
    :return: id of the object found
    """
    for o in list_of_objects_with_names:
        if o.name == name:
            return o.id
    return None


def populate_user_data():
    """
    Populeates users table with generated user data
    :return: None
    """
    users = generate_data.get_list_of_users()

    for user in users:
        password = bcrypt.generate_password_hash(USERS_PASSWORD)
        new_user = create_database.User(name=user['name'], email=user['email'], phone=user['phone'], password = password)
        session.add(new_user)
        print new_user.email

    session.commit()


def populate_ads_data():
    """
    Populates ads table with generated ads data
    :return: None
    """
    ads = generate_data.generate_random_ads(900)
    sub_categories = session.query(create_database.SubCategory).all()
    cities = session.query(create_database.City).all()
    users = session.query(create_database.User).all()

    for ad in ads:
        new_ad = create_database.Ad(sub_category_id = get_id(sub_categories, ad["sub_category"]),
                                    city_id=get_id(cities, ad["city"]),
                                    time_created=ad["date"],
                                    user_id=get_id(users, ad["user_name"]),
                                    contact_name=ad["user_name"],
                                    primary_contact=ad["contact_email"],
                                    contact_email=ad["contact_email"],
                                    contact_phone=ad["contact_phone"],
                                    title = ad["ad_title"],
                                    text=ad["text"],
                                    price_cents=ad["price_cents"],
                                    currency="USD")
        session.add(new_ad)

    session.commit()


def populate_application_test_data():
    """
    Helper function. Calls populate user data and populate ads data/
    :return: None
    """
    populate_user_data()
    populate_ads_data()


def drop_application_tables():
    """
    Deletes all application tables from the database.
    :return: none
    """
    tables_to_drop = [create_database.Ad, create_database.SubCategory, create_database.Category,
                      create_database.City, create_database.User]
    drop_tables(tables_to_drop)


def drop_tables(tables):
    """
    Drops tables from the provided list of tables.
     Checks if table exists before proceeding to drop it.
    :param tables: list of tables to drop
    :return: None
    """
    for table in tables:
        table.__table__.drop(engine, checkfirst=True)


def repopulate_all_tables():
    """
    Deletes tables then re-creates them, initializes  and then populates
      tables with test data.
    :return: None
    """
    drop_application_tables()
    create_database.create_database_and_populate_initial_data()
    populate_application_test_data()


if __name__ == "__main__":
    repopulate_all_tables()
